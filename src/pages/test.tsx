import { Button, NumberInput, transIntoInt } from "components/ui";
import Dropdown, {
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "components/ui/Dropdown";
import { capitalize } from "lodash";
import Head from "next/head";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { FiChevronDown } from "react-icons/fi";

const typeOptions = ["all", "income", "outcome", "salary"];
export default function Home() {
  const [typeFilterValue, setTypeFilterValue] = useState(
    capitalize(typeOptions[0])
  );
  const { control } = useForm();

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex flex-col space-y-4">
        <div className="flex items-center space-x-2 self-end">
          <Dropdown>
            <DropdownMenuTrigger asChild className="px-4">
              <Button
                type="button"
                size="icon"
                color="secondary"
                EndIcon={() => <FiChevronDown className="ml-1 -mb-[2px]" />}
                className="w-28"
              >
                {typeFilterValue}
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent>
              {typeOptions.map((type) => {
                const capType = capitalize(type);

                return (
                  <DropdownMenuItem>
                    <Button
                      onClick={() => {
                        setTypeFilterValue(capType);
                      }}
                      type="button"
                      color="minimal"
                      className="w-full font-normal"
                    >
                      {capType}
                    </Button>
                  </DropdownMenuItem>
                );
              })}
            </DropdownMenuContent>
          </Dropdown>

          <form>
            <NumberInput
              control={control}
              defaultValue={1}
              name="year"
              onChange={(e) => {
                // const balanceYears = balanceHistory.length;
                let parsedYear = transIntoInt(e.target.value);
                //
                // if (parsedYear > balanceYears) {
                //   parsedYear = balanceYears;
                // }
                //
                // setYear(parsedYear as unknown as number);
                return parsedYear;
              }}
              className="!mb-0 !w-32"
              placeholder="Year Balance"
            />
          </form>
        </div>
      </div>
    </div>
  );
}
