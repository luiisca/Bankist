// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    url      = env("DATABASE_URL")
}

generator zod {
    provider = "zod-prisma"
    output   = "./zod"
    imports  = "./zod-utils"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?

    user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@unique([provider, providerAccountId])
}

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     expires      DateTime
//     user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
//     userId       String
// }

model User {
    id                  String    @id @default(cuid())
    name                String
    email               String?   @unique
    emailVerified       DateTime?
    image               String?
    completedOnboarding Boolean   @default(false)
    accounts            Account[]
    // sessions            Session[]

    country     String @default("US")
    inflation   Int    @default(8)
    currency    String @default("USD")
    investPerc  Int    @default(80)
    indexReturn Int    @default(7)

    salary     Salary[]
    categories Category[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Salary {
    id         BigInt   @id @default(autoincrement())
    title      String
    currency   String
    amount     Int
    taxType    String
    taxPercent Int
    variance   Period[]

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
}

model Period {
    id     BigInt @id @default(autoincrement())
    from   Int
    amount Int

    salary     Salary @relation(fields: [salaryId], references: [id], onDelete: Cascade)
    salaryId   BigInt
    taxPercent Int
}

model Category {
    id          BigInt  @id @default(autoincrement())
    title       String
    budget      Int
    currency    String
    type        String
    inflEnabled Boolean
    inflType    String
    country     String
    inflVal     Int
    icon        String
    freqType    String
    frequency   Int

    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String
    records Record[]
}

model Record {
    id          BigInt  @id @default(autoincrement())
    title       String?
    amount      Int
    type        String
    frequency   Int
    inflEnabled Boolean
    country     String
    inflation   Int
    currency    String

    category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId BigInt
}
